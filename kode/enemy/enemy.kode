###
00000000  000   000  00000000  00     00  000   000  
000       0000  000  000       000   000   000 000   
0000000   000 0 000  0000000   000000000    00000    
000       000  0000  000       000 0 000     000     
00000000  000   000  00000000  000   000     000     
###

function Enemy

    @: (@world) ->
        
        @scale = randRange 1 4
        @position = vec()
        @world.enemies.add @
        @playerDist = 0
        @wobbleAccum = 0
        @color = new Color 1 0 0
        
    setPosition: (x, y) ->
        
        z = @world.heightAt x, y
        @position.set @index, x, y, z+@scale
        
        @world.enemies.setPosition @position.x, @position.y, @position.z
        
    calcPosition: ->
    
        @world.enemies.clonePosition @index, @position
        @playerDist = @world.player.getPosition().distanceTo @position
        @l1 = clamp 0 1 @playerDist/400
        @l2 = clamp 0 1 @playerDist/150
        @position
        
    calcPlayerAttraction: (scaledDelta) ->
        
        @wobbleAccum += (1-@l2)*scaledDelta
        @position.lerp @world.player.getPosition(), 0.01 * (1-@l2)
        
    calcRepulsion: ->
        
        return if @l2 > 0.99
        
        if closest = @world.enemies.getClosestEnemy @
            dist = @world.enemies.distanceBetween @, closest
            if dist < 1.0 * (@scale + closest.scale)
                @position.add @world.enemies.repulsionVector @, closest
        
    animate: (scaledDelta) ->
        
        
        @color.copy Colors.enemy
        @color.lerp Colors.landscape, @l2
        @world.enemies.setColor @index, @color
                        
        z = @world.heightAt @position.x, @position.y
        z -= @scale
        o = (3*@scale) * (1-@l1)
        o = clamp 0 2*@scale, o
        
        upDownWobble = 0.4 * @scale * abs sin 1*@wobbleAccum
        
        @world.enemies.setPosition @index, @position.x, @position.y, z+o+upDownWobble
    
module.exports = Enemy