###
00000000   000       0000000   000   000  00000000  00000000   
000   000  000      000   000   000 000   000       000   000  
00000000   000      000000000    00000    0000000   0000000    
000        000      000   000     000     000       000   000  
000        0000000  000   000     000     00000000  000   000  
###

ColorGrid = require '../lib/ColorGrid'

function Player
    
    @: (opt) ->
        
        @mesh = opt?.mesh ? new Mesh Geom.roundedBox({ size:[6 6 6], pos:[0 0 3], radius:1}), Materials.player
        @mesh.setShadow()
        
        @grid = new ColorGrid size:3.5 gridSize:8
        @grid.quads.rotateX deg2rad 90
        @grid.quads.position.set 0 -2.1 3
        @columns = [[0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0]]        
        @mesh.add @grid.quads
        
        geom = Geom.box size:4
        geom.translate 0 0 3
        @box = new Mesh geom, Materials.shinyblack
        @box.setShadow true
        @mesh.add @box
        
        @left = 0
        @right = 0
        @forward = 0
        @backward = 0
        
        @vecs = 
            up: vec 0 0 1
            right: vec 1 0 0
            forward: vec 0 1 0
                
    onPointerLock: (x, y, event) ->
        
        if @backward > 0
            @backward += y*0.01
        else if @forward > 0
            @forward -= y*0.01
        else
            if y > 0 ➜ @backward += y*0.01; @forward = 0
            else       @forward -= y*0.01; @backward = 0
  
        if @right > 0
            @right += x*0.005
        else if @left > 0
            @left -= x*0.005
        else
            if x > 0 ➜ @right += x*0.005; @left = 0
            else       @left  -= x*0.005; @right = 0
        
        @left  = clamp 0 1 @left
        @right = clamp 0 1 @right
        
        @forward = clamp 0 2 @forward
        @backward = clamp 0 2 @backward
        
        0
        
    # getForward: -> Vector.unitY.clone().applyQuaternion @mesh.quaternion
    getForward: -> vec @vecs.forward
        
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    animate: (scaledDelta, delta) ->
        
        @mesh.translateY 2*(@forward - @backward)*scaledDelta
        
        @mesh.position.z = world.landscapeHeight @mesh.position
        
        @columns[randInt(8)][randInt(8)] = randInt(5)
        @grid.setColumns @columns
                    
        @mesh.rotateZ deg2rad 50*(@left - @right)*delta
                        
        # @vecs.up.copy Vector.unitZ; @vecs.up.applyQuaternion @mesh.quaternion
        @vecs.right.copy Vector.unitX; @vecs.right.applyQuaternion @mesh.quaternion
        @vecs.forward.copy Vector.unitY; @vecs.forward.applyQuaternion @mesh.quaternion

        norm = world.landscapeNormal @mesh.position
        
        forwardNorm = @vecs.forward.projectOnPlane norm
        forwardNorm.normalize()
        rightNorm = @vecs.right.projectOnPlane norm
        rightNorm.normalize()
        
        m = new THREE.Matrix4
        m.makeBasis rightNorm, forwardNorm, norm
         
        @mesh.setRotationFromMatrix m
        
    moveForward:  (by=1) -> @forward  = by
    moveBackward: (by=1) -> @backward = by
    turnLeft:     (by=1) -> @left  = by
    turnRight:    (by=1) -> @right = by
    stopForward:  -> @forward  = 0
    stopBackward: -> @backward = 0
    stopLeft:     -> @left     = 0
    stopRight:    -> @right    = 0

    onKeyDown: (combo) ->
        
        switch combo
            'w' 'up'    ➜ return @moveForward()
            's' 'down'  ➜ return @moveBackward()
            'a' 'left'  ➜ return @turnLeft()
            'd' 'right' ➜ return @turnRight()
            
        'unhandled'
        
    onKeyUp: (combo) ->
        
        switch combo
            'w' 'up'    ➜ return @stopForward()
            's' 'down'  ➜ return @stopBackward()
            'a' 'left'  ➜ return @stopLeft()
            'd' 'right' ➜ return @stopRight()
            
        'unhandled'
        
module.exports = Player
    
        