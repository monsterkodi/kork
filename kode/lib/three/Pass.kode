{
    BufferGeometry,
    Float32BufferAttribute,
    OrthographicCamera,
    Mesh
} = require 'three'

class Pass 

    @: ->

        @isPass = true

        # if set to true, the pass is processed by the composer
        @enabled = true

        # if set to true, the pass indicates to swap read and write buffer after rendering
        @needsSwap = true

        # if set to true, the pass clears its buffer before rendering
        @clear = false

        # if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
        @renderToScreen = false

    setSize: () ->

    render: () ->

        console.error( 'THREE.Pass: .render() must be implemented in derived pass.' )

    dispose: () ->

# Helper for passes that need to fill the viewport with a single quad.

_camera = new OrthographicCamera -1, 1, 1, -1, 0, 1

# https://github.com/mrdoob/three.js/pull/21358

class FullscreenTriangleGeometry extends BufferGeometry 

    @:->

        super()

        @setAttribute( 'position', new Float32BufferAttribute( [ -1, 3, 0, -1, -1, 0, 3, -1, 0 ], 3 ) )
        @setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) )


_geometry = new FullscreenTriangleGeometry()

class FullScreenQuad 

    @: ( material ) ->

        @_mesh = new Mesh( _geometry, material )

    dispose: () ->

        @_mesh.geometry.dispose()

    render: ( renderer ) ->

        renderer.render( @_mesh, _camera )

    getMaterial: -> 

        return @_mesh.material

    setMaterial: ( value ) ->

        @_mesh.material = value

module.exports = { Pass, FullScreenQuad }
