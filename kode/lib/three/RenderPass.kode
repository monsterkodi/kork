{ Color } = require 'three'
{ Pass } = require './Pass'

class RenderPass extends Pass 

    @: ( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) ->

        super()

        @scene = scene
        @camera = camera

        @overrideMaterial = overrideMaterial

        @clearColor = clearColor
        @clearAlpha = clearAlpha

        @clear = true
        @clearDepth = false
        @needsSwap = false
        @_oldClearColor = new Color()

    render: ( renderer, writeBuffer, readBuffer ) ->

        oldAutoClear = renderer.autoClear
        renderer.autoClear = false

        # let oldClearAlpha, oldOverrideMaterial

        if ( @overrideMaterial != null )

            oldOverrideMaterial = @scene.overrideMaterial

            @scene.overrideMaterial = @overrideMaterial

        if ( @clearColor != null ) 

            renderer.getClearColor( @_oldClearColor )
            renderer.setClearColor( @clearColor )

        if ( @clearAlpha != null )

            oldClearAlpha = renderer.getClearAlpha()
            renderer.setClearAlpha( @clearAlpha )

        if ( @clearDepth == true )

            renderer.clearDepth()

        renderer.setRenderTarget( @renderToScreen ? null : readBuffer )

        if ( @clear == true ) 

            # TODO: Avoid using autoClear properties, see https:#github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
            renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil )

        renderer.render( @scene, @camera )

        # restore

        if ( @clearColor != null )

            renderer.setClearColor( @_oldClearColor )

        if ( @clearAlpha != null ) 

            renderer.setClearAlpha( oldClearAlpha )

        if ( @overrideMaterial != null ) 

            @scene.overrideMaterial = oldOverrideMaterial

        renderer.autoClear = oldAutoClear

module.exports = RenderPass
