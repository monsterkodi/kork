{ Pass } = require './Pass'

class MaskPass extends Pass 

    @: ( scene, camera ) ->

        super();

        @scene = scene;
        @camera = camera;

        @clear = true;
        @needsSwap = false;

        @inverse = false;

    render: ( renderer, writeBuffer, readBuffer) ->

        context = renderer.getContext();
        state = renderer.state;

        # don't update color or depth

        state.buffers.color.setMask( false );
        state.buffers.depth.setMask( false );

        # lock buffers

        state.buffers.color.setLocked( true );
        state.buffers.depth.setLocked( true );

        # set up stencil

        if @inverse

            writeValue = 0;
            clearValue = 1;

        else

            writeValue = 1;
            clearValue = 0;

        state.buffers.stencil.setTest( true );
        state.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );
        state.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );
        state.buffers.stencil.setClear( clearValue );
        state.buffers.stencil.setLocked( true );

        # draw into the stencil buffer

        renderer.setRenderTarget( readBuffer );
        if @clear ➜ renderer.clear();
        renderer.render( @scene, @camera );

        renderer.setRenderTarget( writeBuffer );
        if @clear ➜ renderer.clear();
        renderer.render( @scene, @camera );

        # unlock color and depth buffer and make them writable for subsequent rendering/clearing

        state.buffers.color.setLocked( false );
        state.buffers.depth.setLocked( false );

        state.buffers.color.setMask( true );
        state.buffers.depth.setMask( true );

        # only render where stencil is set to 1

        state.buffers.stencil.setLocked( false );
        state.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); # draw if == 1
        state.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );
        state.buffers.stencil.setLocked( true );

class ClearMaskPass extends Pass

    @: () ->

        super();

        @needsSwap = false;

    render: ( renderer ) ->

        renderer.state.buffers.stencil.setLocked( false );
        renderer.state.buffers.stencil.setTest( false );

module.exports = { MaskPass, ClearMaskPass }
