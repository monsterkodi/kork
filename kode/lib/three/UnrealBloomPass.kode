{ AdditiveBlending, Color, HalfFloatType, MeshBasicMaterial, ShaderMaterial, UniformsUtils, Vector2, Vector3, WebGLRenderTarget } = require 'three'

{ Pass, FullScreenQuad } = require './Pass'
CopyShader = require './CopyShader'
LuminosityHighPassShader = require './LuminosityHighPassShader'

# UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a
# mip map chain of bloom textures and blurs them with different radii. Because
# of the weighted combination of mips, and because larger blurs are done on
# higher mips, this effect provides good quality and performance.
# Reference:
# - https:#docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/

class UnrealBloomPass extends Pass

    @: ( resolution, strength, radius, threshold ) ->

        super()

        @strength = ( strength != undefined ) ? strength : 1
        @radius = radius
        @threshold = threshold
        @resolution = ( resolution != undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 )

        # create color only once here, reuse it later inside the render function
        @clearColor = new Color( 0, 0, 0 )

        # render targets
        @renderTargetsHorizontal = []
        @renderTargetsVertical = []
        @nMips = 5
        resx = Math.round @resolution.x / 2 
        resy = Math.round @resolution.y / 2 

        @renderTargetBright = new WebGLRenderTarget resx, resy, { type: HalfFloatType } 
        @renderTargetBright.texture.name = 'UnrealBloomPass.bright'
        @renderTargetBright.texture.generateMipmaps = false

        for i in 0...@nMips

            renderTargetHorizonal = new WebGLRenderTarget resx, resy, { type: HalfFloatType } 

            renderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i
            renderTargetHorizonal.texture.generateMipmaps = false

            @renderTargetsHorizontal.push renderTargetHorizonal

            renderTargetVertical = new WebGLRenderTarget resx, resy, { type: HalfFloatType } 

            renderTargetVertical.texture.name = 'UnrealBloomPass.v' + i
            renderTargetVertical.texture.generateMipmaps = false

            @renderTargetsVertical.push renderTargetVertical

            resx = Math.round resx / 2 

            resy = Math.round resy / 2

        # luminosity high pass material

        highPassShader = LuminosityHighPassShader
        @highPassUniforms = UniformsUtils.clone highPassShader.uniforms

        @highPassUniforms[ 'luminosityThreshold' ].value = threshold
        @highPassUniforms[ 'smoothWidth' ].value = 0.01

        @materialHighPassFilter = new ShaderMaterial
            uniforms: @highPassUniforms
            vertexShader: highPassShader.vertexShader
            fragmentShader: highPassShader.fragmentShader

        # gaussian blur materials

        @separableBlurMaterials = []
        kernelSizeArray = [ 3, 5, 7, 9, 11 ]
        resx = Math.round @resolution.x / 2 
        resy = Math.round @resolution.y / 2 

        for i in 0...@nMips

            @separableBlurMaterials.push @getSeperableBlurMaterial kernelSizeArray[ i ]

            @separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2 1 / resx, 1 / resy 

            resx = Math.round resx / 2
            resy = Math.round resy / 2

        # composite material

        @compositeMaterial = @getCompositeMaterial @nMips
        @compositeMaterial.uniforms[ 'blurTexture1' ].value = @renderTargetsVertical[ 0 ].texture
        @compositeMaterial.uniforms[ 'blurTexture2' ].value = @renderTargetsVertical[ 1 ].texture
        @compositeMaterial.uniforms[ 'blurTexture3' ].value = @renderTargetsVertical[ 2 ].texture
        @compositeMaterial.uniforms[ 'blurTexture4' ].value = @renderTargetsVertical[ 3 ].texture
        @compositeMaterial.uniforms[ 'blurTexture5' ].value = @renderTargetsVertical[ 4 ].texture
        @compositeMaterial.uniforms[ 'bloomStrength' ].value = strength
        @compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1

        bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ]
        @compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors
        @bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ]
        @compositeMaterial.uniforms[ 'bloomTintColors' ].value = @bloomTintColors

        # blend material

        copyShader = CopyShader

        @copyUniforms = UniformsUtils.clone copyShader.uniforms

        @blendMaterial = new ShaderMaterial
            uniforms: @copyUniforms
            vertexShader: copyShader.vertexShader
            fragmentShader: copyShader.fragmentShader
            blending: AdditiveBlending
            depthTest: false
            depthWrite: false
            transparent: true

        @enabled = true
        @needsSwap = false

        @_oldClearColor = new Color()
        @oldClearAlpha = 1

        @basic = new MeshBasicMaterial()

        @fsQuad = new FullScreenQuad @basic

    dispose: () ->

        for i in 0...@renderTargetsHorizontal.length

            @renderTargetsHorizontal[ i ].dispose()

        for i in 0...@renderTargetsVertical.length

            @renderTargetsVertical[ i ].dispose()

        @renderTargetBright.dispose()

        for i in 0...@separableBlurMaterials.length

            @separableBlurMaterials[ i ].dispose()

        @compositeMaterial.dispose()
        @blendMaterial.dispose()
        @basic.dispose()
        @fsQuad.dispose()

    setSize: ( width, height ) ->

        resx = Math.round width / 2 
        resy = Math.round height / 2 

        @renderTargetBright.setSize resx, resy

        for i in 0...@nMips

            @renderTargetsHorizontal[ i ].setSize resx, resy
            @renderTargetsVertical[ i ].setSize resx, resy

            @separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2 1 / resx, 1 / resy

            resx = Math.round resx / 2
            resy = Math.round resy / 2

    render: ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) ->

        renderer.getClearColor @_oldClearColor 
        @oldClearAlpha = renderer.getClearAlpha()
        oldAutoClear = renderer.autoClear
        renderer.autoClear = false

        renderer.setClearColor @clearColor, 0

        if maskActive
            renderer.state.buffers.stencil.setTest false

        # Render input to screen

        if @renderToScreen

            @fsQuad.setMaterial @basic
            @basic.map = readBuffer.texture

            renderer.setRenderTarget null
            renderer.clear()
            @fsQuad.render renderer

        # 1. Extract Bright Areas

        @highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture
        @highPassUniforms[ 'luminosityThreshold' ].value = @threshold
        @fsQuad.setMaterial @materialHighPassFilter

        renderer.setRenderTarget @renderTargetBright
        renderer.clear()
        @fsQuad.render renderer

        # 2. Blur All the mips progressively

        inputRenderTarget = @renderTargetBright

        for i in 0...@nMips

            @fsQuad.setMaterial @separableBlurMaterials[ i ]

            @separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture
            @separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX
            renderer.setRenderTarget @renderTargetsHorizontal[ i ]
            renderer.clear()
            @fsQuad.render renderer

            @separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = @renderTargetsHorizontal[ i ].texture
            @separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY
            renderer.setRenderTarget @renderTargetsVertical[ i ] 
            renderer.clear()
            @fsQuad.render renderer 

            inputRenderTarget = @renderTargetsVertical[ i ]

        # Composite All the mips

        @fsQuad.setMaterial @compositeMaterial
        @compositeMaterial.uniforms[ 'bloomStrength' ].value = @strength
        @compositeMaterial.uniforms[ 'bloomRadius' ].value = @radius
        @compositeMaterial.uniforms[ 'bloomTintColors' ].value = @bloomTintColors

        renderer.setRenderTarget @renderTargetsHorizontal[ 0 ] 
        renderer.clear()
        @fsQuad.render renderer 

        # Blend it additively over the input texture

        @fsQuad.setMaterial @blendMaterial
        @copyUniforms[ 'tDiffuse' ].value = @renderTargetsHorizontal[ 0 ].texture

        if maskActive  
            renderer.state.buffers.stencil.setTest true 

        if @renderToScreen

            renderer.setRenderTarget null
            @fsQuad.render renderer

        else

            renderer.setRenderTarget readBuffer 
            @fsQuad.render renderer 

        # Restore renderer settings

        renderer.setClearColor @_oldClearColor, @oldClearAlpha 
        renderer.autoClear = oldAutoClear

    getSeperableBlurMaterial: ( kernelRadius ) ->

        coefficients = []

        for i in 0...kernelRadius

            coefficients.push 0.39894 * Math.exp( -0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius

        new ShaderMaterial

            defines:
                KERNEL_RADIUS: kernelRadius

            uniforms: 
                colorTexture: { value: null }
                invSize: { value: new Vector2( 0.5, 0.5 ) } # inverse texture size
                direction: { value: new Vector2( 0.5, 0.5 ) }
                gaussianCoefficients: { value: coefficients } # precomputed Gaussian coefficients

            vertexShader: """
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                """

            fragmentShader: """
                #include <common>
                varying vec2 vUv;
                uniform sampler2D colorTexture;
                uniform vec2 invSize;
                uniform vec2 direction;
                uniform float gaussianCoefficients[KERNEL_RADIUS];

                void main() {
                    float weightSum = gaussianCoefficients[0];
                    vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
                    for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
                        float x = float(i);
                        float w = gaussianCoefficients[i];
                        vec2 uvOffset = direction * invSize * x;
                        vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
                        vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
                        diffuseSum += (sample1 + sample2) * w;
                        weightSum += 2.0 * w;
                    }
                    gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
                }
                """

    getCompositeMaterial: ( nMips ) ->

        new ShaderMaterial

            defines:
                NUM_MIPS: nMips

            uniforms:
                blurTexture1: { value: null }
                blurTexture2: { value: null }
                blurTexture3: { value: null }
                blurTexture4: { value: null }
                blurTexture5: { value: null }
                bloomStrength: { value: 1.0 }
                bloomFactors: { value: null }
                bloomTintColors: { value: null }
                bloomRadius: { value: 0.0 }

            vertexShader: """
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                """

            fragmentShader: """
                varying vec2 vUv;
                uniform sampler2D blurTexture1;
                uniform sampler2D blurTexture2;
                uniform sampler2D blurTexture3;
                uniform sampler2D blurTexture4;
                uniform sampler2D blurTexture5;
                uniform float bloomStrength;
                uniform float bloomRadius;
                uniform float bloomFactors[NUM_MIPS];
                uniform vec3 bloomTintColors[NUM_MIPS];

                float lerpBloomFactor(in float factor) {
                    float mirrorFactor = 1.2 - factor;
                    return mix(factor, mirrorFactor, bloomRadius);
                }

                void main() {
                    gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
                        lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
                        lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
                        lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
                        lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
                }
                """

UnrealBloomPass.BlurDirectionX = new Vector2 1.0, 0.0
UnrealBloomPass.BlurDirectionY = new Vector2 0.0, 1.0

module.exports = UnrealBloomPass
