{ Clock, HalfFloatType, NoBlending, Vector2, WebGLRenderTarget } = require 'three'

CopyShader  = require './CopyShader'
ShaderPass  = require './ShaderPass'
{ MaskPass, ClearMaskPass } = require './MaskPass'

class EffectComposer

    @: ( renderer, renderTarget ) ->

        @renderer = renderer

        @_pixelRatio = renderer.getPixelRatio()

        if renderTarget == undefined

            size = renderer.getSize new Vector2() 
            @_width = size.width
            @_height = size.height
            renderTarget = new WebGLRenderTarget @_width * @_pixelRatio, @_height * @_pixelRatio, { type: HalfFloatType } 
            renderTarget.texture.name = 'EffectComposer.rt1'

        else

            @_width = renderTarget.width
            @_height = renderTarget.height

        @renderTarget1 = renderTarget
        @renderTarget2 = renderTarget.clone()
        @renderTarget2.texture.name = 'EffectComposer.rt2'

        @writeBuffer = @renderTarget1
        @readBuffer = @renderTarget2

        @renderToScreen = true

        @passes = []

        @copyPass = new ShaderPass CopyShader
        @copyPass.material.blending = NoBlending

        @clock = new Clock()

    swapBuffers: () ->

        tmp = @readBuffer
        @readBuffer = @writeBuffer
        @writeBuffer = tmp

    addPass: ( pass ) ->

        @passes.push pass 
        pass.setSize @_width * @_pixelRatio, @_height * @_pixelRatio 

    insertPass: ( pass, index ) ->

        @passes.splice index, 0, pass 
        pass.setSize @_width * @_pixelRatio, @_height * @_pixelRatio 

    removePass: ( pass ) ->

        index = @passes.indexOf pass 

        if index != -1

            @passes.splice index, 1

    isLastEnabledPass: ( passIndex ) ->

        for i in passIndex+1 ... @passes.length
            if @passes[i].enabled
                return false
        return true

    render: ( deltaTime ) ->

        # deltaTime value is in seconds

        if deltaTime == undefined

            deltaTime = @clock.getDelta()

        currentRenderTarget = @renderer.getRenderTarget()

        maskActive = false

        for i in 0...@passes.length

            pass = @passes[ i ]

            if pass.enabled == false âžœ continue

            pass.renderToScreen = @renderToScreen and @isLastEnabledPass i 
            pass.render @renderer, @writeBuffer, @readBuffer, deltaTime, maskActive 

            if pass.needsSwap 

                if maskActive

                    context = @renderer.getContext()
                    stencil = @renderer.state.buffers.stencil

                    # context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff )
                    stencil.setFunc context.NOTEQUAL, 1, 0xffffffff 

                    @copyPass.render @renderer, @writeBuffer, @readBuffer, deltaTime 

                    # context.stencilFunc( context.EQUAL, 1, 0xffffffff )
                    stencil.setFunc context.EQUAL, 1, 0xffffffff 

                @swapBuffers()

            if MaskPass != undefined 

                if pass instanceof MaskPass

                    maskActive = true

                else if pass instanceof ClearMaskPass

                    maskActive = false

        @renderer.setRenderTarget currentRenderTarget

    reset: ( renderTarget ) ->

        if renderTarget == undefined

            size = @renderer.getSize new Vector2()
            @_pixelRatio = @renderer.getPixelRatio()
            @_width = size.width
            @_height = size.height

            renderTarget = @renderTarget1.clone()
            renderTarget.setSize @_width * @_pixelRatio, @_height * @_pixelRatio 

        @renderTarget1.dispose()
        @renderTarget2.dispose()
        @renderTarget1 = renderTarget
        @renderTarget2 = renderTarget.clone()

        @writeBuffer = @renderTarget1
        @readBuffer = @renderTarget2

    setSize: ( width, height ) ->

        @_width = width
        @_height = height

        effectiveWidth = @_width * @_pixelRatio
        effectiveHeight = @_height * @_pixelRatio

        @renderTarget1.setSize effectiveWidth, effectiveHeight
        @renderTarget2.setSize effectiveWidth, effectiveHeight

        for i in 0...@passes.length

            @passes[ i ].setSize effectiveWidth, effectiveHeight

    setPixelRatio: ( pixelRatio ) ->

        @_pixelRatio = pixelRatio

        @setSize @_width, @_height

    dispose: () ->

        @renderTarget1.dispose()
        @renderTarget2.dispose()

        @copyPass.dispose()

module.exports = EffectComposer
