###
00000000   000   000  000   000   0000000  000   0000000   0000000
000   000  000   000   000 000   000       000  000       000     
00000000   000000000    00000    0000000   000  000       0000000 
000        000   000     000          000  000  000            000
000        000   000     000     0000000   000   0000000  0000000 
###

CANNON = require 'cannon-es'
CannonDebugger  = require 'cannon-es-debugger'

function Physics

    @: ->

        @cannon = new CANNON.World gravity: new CANNON.Vec3 0 0 -9
            
        @cannonDebugger = new CannonDebugger world.scene, @cannon
        
        groundBody = new CANNON.Body type:CANNON.Body.STATIC, shape:new CANNON.Plane()
        groundBody.position.z = -0.5
        @cannon.addBody groundBody
                               
        if false
            @cylinderBody1 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.8 1 4 16
            @cylinderBody1.position.set -5 0 5
            @cylinderBody1.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody1
                  
            @cylinderBody2 = new CANNON.Body
                mass: 0.1
                shape: new CANNON.Cylinder 0.5 1 4 16
            @cylinderBody2.position.set 5 0 5
            @cylinderBody2.shapeOrientations[0].setFromVectors new CANNON.Vec3(0 1 0), new CANNON.Vec3(0 0 1)
            @cannon.addBody @cylinderBody2
            
            constraint = new CANNON.ConeTwistConstraint @cylinderBody1, @cylinderBody2,
                collideConnected: true 
                wakeUpBodies:true
                # angle: deg2rad 90 
                axisA:  new CANNON.Vec3  0 0 1
                pivotA: new CANNON.Vec3  0 0 3
                axisB:  new CANNON.Vec3  0 0 -1
                pivotB: new CANNON.Vec3  0 0 3
                maxForce: 10
                twistAngle: deg2rad 180
            
            @cannon.addConstraint constraint
            
    clear: ->
        
        meshBodies = @cannon.bodies.filter (b) -> b.mesh and not b.keep
        for body in meshBodies
            @removeBody body
        
    addBody: (body) -> @cannon.addBody body
    removeBody: (body) ->
        
        body.mesh.removeFromParent()
        delete body.obj.body
        delete body.obj
        delete body.mesh
        @cannon.removeBody body
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: (scaledDelta, timeSum) ->
        log 'physics'
        p = vec()
        q = new Quaternion
        cnt = 0
        for b in @cannon.bodies
            if b.kinematic
                cnt++
                b.kinematic.getWorldPosition p
                b.kinematic.getWorldQuaternion q
                b.position.copy p
                b.quaternion.copy q
                    
        @cannon.step 1/60, scaledDelta, 10 # max substeps
        if prefs.get 'cannon'
            @cannonDebugger.update()
        
        for b in @cannon.bodies
            if b.mesh
                b.mesh.position.copy b.position
                b.mesh.quaternion.copy b.quaternion
            
        
module.exports = Physics
